// Code generated by MockGen. DO NOT EDIT.
// Source: shipping/cargo/handling.go

// Package mock_cargo is a generated GoMock package.
package mock_cargo

import (
	reflect "reflect"

	cargo "github.com/go-kit/examples/shipping/cargo"
	gomock "github.com/golang/mock/gomock"
)

// MockHandlingEventRepository is a mock of HandlingEventRepository interface.
type MockHandlingEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHandlingEventRepositoryMockRecorder
}

// MockHandlingEventRepositoryMockRecorder is the mock recorder for MockHandlingEventRepository.
type MockHandlingEventRepositoryMockRecorder struct {
	mock *MockHandlingEventRepository
}

// NewMockHandlingEventRepository creates a new mock instance.
func NewMockHandlingEventRepository(ctrl *gomock.Controller) *MockHandlingEventRepository {
	mock := &MockHandlingEventRepository{ctrl: ctrl}
	mock.recorder = &MockHandlingEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlingEventRepository) EXPECT() *MockHandlingEventRepositoryMockRecorder {
	return m.recorder
}

// QueryHandlingHistory mocks base method.
func (m *MockHandlingEventRepository) QueryHandlingHistory(arg0 cargo.TrackingID) cargo.HandlingHistory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryHandlingHistory", arg0)
	ret0, _ := ret[0].(cargo.HandlingHistory)
	return ret0
}

// QueryHandlingHistory indicates an expected call of QueryHandlingHistory.
func (mr *MockHandlingEventRepositoryMockRecorder) QueryHandlingHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryHandlingHistory", reflect.TypeOf((*MockHandlingEventRepository)(nil).QueryHandlingHistory), arg0)
}

// Store mocks base method.
func (m *MockHandlingEventRepository) Store(e cargo.HandlingEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", e)
}

// Store indicates an expected call of Store.
func (mr *MockHandlingEventRepositoryMockRecorder) Store(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockHandlingEventRepository)(nil).Store), e)
}
