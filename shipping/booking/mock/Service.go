// Code generated by MockGen. DO NOT EDIT.
// Source: shipping/booking/service.go

// Package mock_booking is a generated GoMock package.
package mock_booking

import (
	reflect "reflect"
	time "time"

	booking "github.com/go-kit/examples/shipping/booking"
	cargo "github.com/go-kit/examples/shipping/cargo"
	location "github.com/go-kit/examples/shipping/location"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AssignCargoToRoute mocks base method.
func (m *MockService) AssignCargoToRoute(id cargo.TrackingID, itinerary cargo.Itinerary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignCargoToRoute", id, itinerary)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignCargoToRoute indicates an expected call of AssignCargoToRoute.
func (mr *MockServiceMockRecorder) AssignCargoToRoute(id, itinerary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignCargoToRoute", reflect.TypeOf((*MockService)(nil).AssignCargoToRoute), id, itinerary)
}

// BookNewCargo mocks base method.
func (m *MockService) BookNewCargo(origin, destination location.UNLocode, deadline time.Time) (cargo.TrackingID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookNewCargo", origin, destination, deadline)
	ret0, _ := ret[0].(cargo.TrackingID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookNewCargo indicates an expected call of BookNewCargo.
func (mr *MockServiceMockRecorder) BookNewCargo(origin, destination, deadline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookNewCargo", reflect.TypeOf((*MockService)(nil).BookNewCargo), origin, destination, deadline)
}

// Cargos mocks base method.
func (m *MockService) Cargos() []booking.Cargo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cargos")
	ret0, _ := ret[0].([]booking.Cargo)
	return ret0
}

// Cargos indicates an expected call of Cargos.
func (mr *MockServiceMockRecorder) Cargos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cargos", reflect.TypeOf((*MockService)(nil).Cargos))
}

// ChangeDestination mocks base method.
func (m *MockService) ChangeDestination(id cargo.TrackingID, destination location.UNLocode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDestination", id, destination)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeDestination indicates an expected call of ChangeDestination.
func (mr *MockServiceMockRecorder) ChangeDestination(id, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDestination", reflect.TypeOf((*MockService)(nil).ChangeDestination), id, destination)
}

// LoadCargo mocks base method.
func (m *MockService) LoadCargo(id cargo.TrackingID) (booking.Cargo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCargo", id)
	ret0, _ := ret[0].(booking.Cargo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCargo indicates an expected call of LoadCargo.
func (mr *MockServiceMockRecorder) LoadCargo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCargo", reflect.TypeOf((*MockService)(nil).LoadCargo), id)
}

// Locations mocks base method.
func (m *MockService) Locations() []booking.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locations")
	ret0, _ := ret[0].([]booking.Location)
	return ret0
}

// Locations indicates an expected call of Locations.
func (mr *MockServiceMockRecorder) Locations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locations", reflect.TypeOf((*MockService)(nil).Locations))
}

// RequestPossibleRoutesForCargo mocks base method.
func (m *MockService) RequestPossibleRoutesForCargo(id cargo.TrackingID) []cargo.Itinerary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPossibleRoutesForCargo", id)
	ret0, _ := ret[0].([]cargo.Itinerary)
	return ret0
}

// RequestPossibleRoutesForCargo indicates an expected call of RequestPossibleRoutesForCargo.
func (mr *MockServiceMockRecorder) RequestPossibleRoutesForCargo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPossibleRoutesForCargo", reflect.TypeOf((*MockService)(nil).RequestPossibleRoutesForCargo), id)
}
